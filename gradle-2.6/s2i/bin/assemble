#!/bin/sh

# Source code provided to STI is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

# Resulting WAR files will be deployed to /opt/eap/standalone/deployments
DEPLOY_DIR=$JBOSS_HOME/standalone/deployments

# JBoss AS data dir. Can be overridden.
DATA_DIR=${DATA_DIR-$JBOSS_HOME/data}

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
ARTIFACT_DIR=build/libs

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all WAR and EAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.jar $LOCAL_SOURCE_DIR/$1/*.war $LOCAL_SOURCE_DIR/$1/*.ear $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a build.gradle is present to run a gradle build
if [ -f "$LOCAL_SOURCE_DIR/build.gradle" ]; then

    pushd $LOCAL_SOURCE_DIR &> /dev/null

    if [ -z "$GRADLE_ARGS" ]; then
        export GRADLE_ARGS="clean war -x test -PwarName=ROOT.war"
    fi

    echo "Gradle file found, using these gradle args 'gradle ${GRADLE_ARGS}'"
    echo "Using $(gradle -v)"

    echo "Execute gradle build"
    gradle $GRADLE_ARGS

    copy_artifacts "$ARTIFACT_DIR"

    # cleanup
    if [ -d "$HOME/.gradle/caches" ]; then
      rm -r "$HOME/.gradle/caches"
    fi

    popd &> /dev/null

fi

# Copy (probably binary) artifacts from the deployments/
# directory to the $JBOSS_HOME/standalone/deployments/
# directory for later deployment
copy_artifacts "deployments"

if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."
  cp -v $LOCAL_SOURCE_DIR/configuration/* $JBOSS_HOME/standalone/configuration/
fi

if [ -d $LOCAL_SOURCE_DIR/modules ]; then
  echo "Copying modules from project..."
  cp -vr $LOCAL_SOURCE_DIR/modules/* $JBOSS_HOME/modules/
fi

exit 0
